name: Terraform CI/CD Pipeline

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint & Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - uses: terraform-linters/setup-tflint@v4

      - run: terraform init

      - run: tflint

      - run: terraform fmt -check -recursive

      - run: terraform validate

      - name: Comment Lint Errors
        if: failure() && github.event_name == 'pull_request'
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github-token: ${{ secrets.PAT_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - run: terraform init

      - name: tfsec Scan
        uses: aquasecurity/tfsec-pr-commenter-action@v1.3.2
        with:
          github_token: ${{ secrets.PAT_TOKEN }}

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [lint, security]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - run: terraform init

      - run: terraform plan -var-file="terraform.tfvars"

      - name: Comment Plan
        if: github.event_name == 'pull_request'
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    if: always()
    needs: [plan]
    outputs:
      tag: ${{ steps.versioning.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate Version Tag
        id: versioning
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          tag_prefix: v
          default_bump: patch
  artifact:
    name: Build & Publish Artifact
    runs-on: ubuntu-latest
    needs: [plan, version]
    steps:
      - uses: actions/checkout@v4

      - name: Create Build Directory
        run: mkdir -p build

      - name: Create Dev ZIP (for PRs)
        if: github.event_name == 'pull_request'
        run: zip -r build/terraform-dev-${{ needs.version.outputs.tag }}.zip . -x ".git/*" -x ".github/*"

      - name: Upload Dev Artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-dev-${{ needs.version.outputs.tag }}
          path: build/terraform-dev-${{ needs.version.outputs.tag }}.zip

      - name: Create Release ZIP (for main)
        if: github.ref == 'refs/heads/main'
        run: zip -r build/terraform-release-${{ needs.version.outputs.tag }}.zip . -x ".git/*" -x ".github/*"

      - name: Publish GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: marvinpinto/action-automatic-releases@v1
        with:
          repo_token: ${{ secrets.PAT_TOKEN }}
          automatic_release_tag: ${{ needs.version.outputs.tag }}
          title: Release ${{ needs.version.outputs.tag }}
          files: build/terraform-release-${{ needs.version.outputs.tag }}.zip
